//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ventas2.Modelo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ConsesionariaEntities : DbContext
    {
        public ConsesionariaEntities()
            : base("name=ConsesionariaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Administrador> Administradors { get; set; }
        public virtual DbSet<Factura> Facturas { get; set; }
        public virtual DbSet<MarcaVehiculo> MarcaVehiculoes { get; set; }
        public virtual DbSet<PuestoTrabajo> PuestoTrabajoes { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }
        public virtual DbSet<Vehiculo> Vehiculoes { get; set; }
    
        public virtual int AgregarAdministrador(string nombre, string apellido, string correo, string contraseña, Nullable<int> idPuestoTrabajo)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var idPuestoTrabajoParameter = idPuestoTrabajo.HasValue ?
                new ObjectParameter("IdPuestoTrabajo", idPuestoTrabajo) :
                new ObjectParameter("IdPuestoTrabajo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarAdministrador", nombreParameter, apellidoParameter, correoParameter, contraseñaParameter, idPuestoTrabajoParameter);
        }
    
        public virtual int AgregarMarcaVehiculo(string nombreMarca)
        {
            var nombreMarcaParameter = nombreMarca != null ?
                new ObjectParameter("NombreMarca", nombreMarca) :
                new ObjectParameter("NombreMarca", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarMarcaVehiculo", nombreMarcaParameter);
        }
    
        public virtual int AgregarUsuario(string nombre, string apellido, string correo, string telefono, string contraseña, string pais, string ciudad)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("Pais", pais) :
                new ObjectParameter("Pais", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarUsuario", nombreParameter, apellidoParameter, correoParameter, telefonoParameter, contraseñaParameter, paisParameter, ciudadParameter);
        }
    
        public virtual int AgregarVehiculo(string nombreVehiculo, Nullable<int> idMarca, Nullable<int> año, Nullable<double> precio, Nullable<int> cantidad, Nullable<double> motor, string modelo, string descripcion, string transmision, byte[] imagen)
        {
            var nombreVehiculoParameter = nombreVehiculo != null ?
                new ObjectParameter("NombreVehiculo", nombreVehiculo) :
                new ObjectParameter("NombreVehiculo", typeof(string));
    
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            var añoParameter = año.HasValue ?
                new ObjectParameter("Año", año) :
                new ObjectParameter("Año", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(double));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var motorParameter = motor.HasValue ?
                new ObjectParameter("Motor", motor) :
                new ObjectParameter("Motor", typeof(double));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("Modelo", modelo) :
                new ObjectParameter("Modelo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var transmisionParameter = transmision != null ?
                new ObjectParameter("Transmision", transmision) :
                new ObjectParameter("Transmision", typeof(string));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarVehiculo", nombreVehiculoParameter, idMarcaParameter, añoParameter, precioParameter, cantidadParameter, motorParameter, modeloParameter, descripcionParameter, transmisionParameter, imagenParameter);
        }
    
        public virtual int EditarAdministrador(Nullable<int> idAdmin, string nombre, string apellido, string correo, string contraseña, Nullable<int> idPuestoTrabajo)
        {
            var idAdminParameter = idAdmin.HasValue ?
                new ObjectParameter("IdAdmin", idAdmin) :
                new ObjectParameter("IdAdmin", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var idPuestoTrabajoParameter = idPuestoTrabajo.HasValue ?
                new ObjectParameter("IdPuestoTrabajo", idPuestoTrabajo) :
                new ObjectParameter("IdPuestoTrabajo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarAdministrador", idAdminParameter, nombreParameter, apellidoParameter, correoParameter, contraseñaParameter, idPuestoTrabajoParameter);
        }
    
        public virtual int EditarMarcaVehiculo(Nullable<int> idMarca, string nombreMarca)
        {
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            var nombreMarcaParameter = nombreMarca != null ?
                new ObjectParameter("NombreMarca", nombreMarca) :
                new ObjectParameter("NombreMarca", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarMarcaVehiculo", idMarcaParameter, nombreMarcaParameter);
        }
    
        public virtual int EditarUsuario(Nullable<int> idUser, string nombre, string apellido, string correo, string telefono, string contraseña, string pais, string ciudad)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("Pais", pais) :
                new ObjectParameter("Pais", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarUsuario", idUserParameter, nombreParameter, apellidoParameter, correoParameter, telefonoParameter, contraseñaParameter, paisParameter, ciudadParameter);
        }
    
        public virtual int EditarVehiculo(Nullable<int> idVehiculo, string nombreVehiculo, Nullable<int> idMarca, Nullable<int> año, Nullable<double> precio, Nullable<int> cantidad, Nullable<double> motor, string modelo, string descripcion, string transmision, byte[] imagen)
        {
            var idVehiculoParameter = idVehiculo.HasValue ?
                new ObjectParameter("IdVehiculo", idVehiculo) :
                new ObjectParameter("IdVehiculo", typeof(int));
    
            var nombreVehiculoParameter = nombreVehiculo != null ?
                new ObjectParameter("NombreVehiculo", nombreVehiculo) :
                new ObjectParameter("NombreVehiculo", typeof(string));
    
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            var añoParameter = año.HasValue ?
                new ObjectParameter("Año", año) :
                new ObjectParameter("Año", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(double));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var motorParameter = motor.HasValue ?
                new ObjectParameter("Motor", motor) :
                new ObjectParameter("Motor", typeof(double));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("Modelo", modelo) :
                new ObjectParameter("Modelo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var transmisionParameter = transmision != null ?
                new ObjectParameter("Transmision", transmision) :
                new ObjectParameter("Transmision", typeof(string));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarVehiculo", idVehiculoParameter, nombreVehiculoParameter, idMarcaParameter, añoParameter, precioParameter, cantidadParameter, motorParameter, modeloParameter, descripcionParameter, transmisionParameter, imagenParameter);
        }
    
        public virtual int EliminarAdministrador(Nullable<int> idAdmin)
        {
            var idAdminParameter = idAdmin.HasValue ?
                new ObjectParameter("IdAdmin", idAdmin) :
                new ObjectParameter("IdAdmin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarAdministrador", idAdminParameter);
        }
    
        public virtual int EliminarMarcaVehiculo(Nullable<int> idMarca)
        {
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarMarcaVehiculo", idMarcaParameter);
        }
    
        public virtual int EliminarUsuario(Nullable<int> idUser)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarUsuario", idUserParameter);
        }
    
        public virtual int EliminarVehiculo(Nullable<int> idVehiculo)
        {
            var idVehiculoParameter = idVehiculo.HasValue ?
                new ObjectParameter("IdVehiculo", idVehiculo) :
                new ObjectParameter("IdVehiculo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarVehiculo", idVehiculoParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
